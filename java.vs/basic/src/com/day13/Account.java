package com.day13;

/*
 객체(Object) - 물건, 대상 
 책상, 컴퓨터, 모니터, 휴대폰 등의 물건
 친구, 선생님, 어머니, 아버지 등의 대상
 
객체 지향 프로그래밍 - 우리 주변의 물건이나 대상의 행동을 그대로 실체화시켜 프로그래밍하는 것

객체의 구성 요소
- 상태정보(데이터, 속성)
    기능(행동)

상태정보는 변수로 표현
기능은 메서드로 표현

객체를 여러개 생성하기 위해서는 틀이 필요함
=> 클래스(Class)

객체 지향 관점에서 클래스의 정의
- 클래스는 객체를 생성하기 위한 틀로서, 상태정보와 기능으로 구성되어 있다

   클래스		객체
 ------------------
   붕어빵틀		붕어빵
   자동차 설계도	자동차
   제품 설계도	제품
 -------------------
    틀			실체  

프로그래밍 관점에서 클래스의 정의
- 관련된 변수와 메서드를 함께 정의하는 것

예) 나는 은행 계좌에서 30000원을 출금했다
객체 - 나, 은행계좌, 30000원
=> 은행계좌 객체의 구성 요소
상태정보 - 계좌번호, 이름, 잔액  => 멤버변수로 표현
기능 - 출금하다, 입금하다		 => 메서드로 표현      
 */

//은행계좌 객체를 생성하기 위한 틀인 은행계좌 클래스 정의
public class Account {
	//1. 멤버변수
	String accId;  	//계좌번호
	String name;	//이름
	int balance;	//잔액
	
	//2. 생성자
	//=> 객체를 생성하면 자동으로 호출되어 가장 먼저 실행되는 메서드
	//=> 멤버변수 초기화를 목적으로 사용되는 메서드
	//클래스명과 동일하고, 매개변수는 있을 수 있으나 반환타입은 없다
	
	//기본 생성자 - 매개변수가 없는 생성자
	//별도로 생성자를 만들지 않으면 컴파일러가 기본생성자를 자동으로 만들어줌
	//하지만 생성자를 하나라도 만들면 컴파일러는 더 이상 기본 생성자를 만들지 않음
	public Account() {
		
	}
	
	//매개변수가 있는 생성자
	public Account(String p_accId, String p_name, int p_balance) {
		accId=p_accId;
		name=p_name;
		balance=p_balance;
	}
		
	//3. 메서드
	//출금하는 기능의 메서드
	public void withdraw(int money) {
		balance -= money;
	}
	
	//입금하는 기능의 메서드
	public void deposit(int money) {
		balance += money;
	}
	
	//편의상 추가된 메서드 - 출력 기능
	public void showInfo() {
		System.out.println("계좌번호 : " + accId);
		System.out.println("이름 : " + name);
		System.out.println("잔액 : " + balance+"\n");		
	}
}
