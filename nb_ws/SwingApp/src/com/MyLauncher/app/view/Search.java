/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/

package MyLauncher.app.view;

import MyLauncher.app.model.MemberDTO;
import MyLauncher.app.model.RoomDAO;
import MyLauncher.app.model.RoomDTO;
import java.awt.Choice;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.*;
import java.awt.event.ItemListener;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jseun
 */
public class Search extends javax.swing.JFrame implements ItemListener, ActionListener{
    private String[] colNames={"이름","방타입","가격","위치","설명","할인"};
    private DefaultTableModel model;
    private RoomDAO dao;
    private JTable table;
    private String motel, hotel, geustHouse,id;
    private MemberDTO dto = new MemberDTO();
    /** Creates new form Search */
    public Search() {
        initComponents();
        init();
        addEvent();
    }
    
    Search(String motel) {
        this();
        this.motel=motel;
        showBySearch(motel);
        tfId.setText(motel);
    }

    Search(String motel, String id) {
        this();
        this.id=id;
        this.motel=motel;
        showBySearch(motel);
        tfId.setText(id);
    }
    
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfSearch = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        scrollPane = new javax.swing.JScrollPane();
        table1 = new javax.swing.JTable();
        keyword = new javax.swing.JComboBox<>();
        btreservation = new javax.swing.JButton();
        tfId = new javax.swing.JTextField();
        btSearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tfSearch.setText("지역, 지하철역으로 찾아주세요");
        tfSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfSearchMouseClicked(evt);
            }
        });

        jLabel1.setText("추천 키워드");

        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "이름", "방타입", "가격", "위치", "추가 설명", "할인"
            }
        ));
        scrollPane.setViewportView(table1);

        keyword.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "강남", "잠실", "용인", "성남", "부평", "구월", "해운대" }));

        btreservation.setText("예약하기");

        tfId.setEnabled(false);

        btSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MyLauncher/app/image/search.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 753, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(keyword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(tfId)
                            .addComponent(btreservation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(44, 44, 44))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btSearch)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tfId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btSearch))
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keyword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btreservation))
                .addGap(27, 27, 27)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void tfSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfSearchMouseClicked
        tfSearch.setText("");
    }//GEN-LAST:event_tfSearchMouseClicked
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Search().setVisible(true);
            }
        });
    }
    
    private void init() {
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btSearch;
    private javax.swing.JButton btreservation;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JComboBox<String> keyword;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable table1;
    private javax.swing.JTextField tfId;
    private javax.swing.JTextField tfSearch;
    // End of variables declaration//GEN-END:variables
    
    
    
    private void showAll() throws SQLException {
        String search = tfSearch.getText();
        RoomDAO dao = new RoomDAO();
        if(search==null || search.isEmpty()){
            JOptionPane.showMessageDialog(this, "지역명을 입력하세요");
            tfSearch.requestFocus();
            return;
        }
        
        ArrayList<RoomDTO> list =dao.showByPlace(search);
        //3.
        if(list==null || list.isEmpty()){
            JOptionPane.showMessageDialog(this, "방이 없습니다.");
            return;
        }
        
        String[][] data = new String[list.size()][colNames.length];
        for(int i=0;i<list.size();i++){
            RoomDTO dto = list.get(i);
            
            data[i][0] = dto.getName();
            data[i][1] = dto.getRoomtype();
            data[i][2] = dto.getPrice()+"";
            data[i][3] = dto.getPlace();
            data[i][4] = dto.getDescription();
            data[i][5] = dto.getDiscount()+"";
            model= new DefaultTableModel(data, colNames);
            
        }//for
        table1.setModel(model);
    }//showAll
    
    private void addEvent() {
        keyword.addItemListener(this);
        btreservation.addActionListener(this);
        tfSearch.addActionListener(this);
        btSearch.addActionListener(this);
    }
    
    @Override
    public void itemStateChanged(ItemEvent e) {
        RoomDAO dao = new RoomDAO();
        if(e.getSource()==keyword){
            try {
                String search = (String) keyword.getSelectedItem();
                ArrayList<RoomDTO> list = dao.showByPlace(search);
                
                //3.
                if(list==null || list.isEmpty()){
                    JOptionPane.showMessageDialog(this, "방이 없습니다.");
                    return;
                }
                
                String[][] data = new String[list.size()][colNames.length];
                for(int i=0;i<list.size();i++){
                    RoomDTO dto = list.get(i);
                    
                    data[i][0] = dto.getName();
                    data[i][1] = dto.getRoomtype();
                    data[i][2] = dto.getPrice()+"";
                    data[i][3] = dto.getPlace();
                    data[i][4] = dto.getDescription();
                    data[i][5] = dto.getDiscount()+"";
                    
                    
                    model= new DefaultTableModel(data, colNames);
                    
                }//for
                table1.setModel(model);
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            
        }
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if(e.getSource()==btreservation){
            int row = table1.getSelectedRow();
            String name=(String) table1.getValueAt(row, 0);
            String roomtype=(String) table1.getValueAt(row, 1);
            String price= (String)(table1.getValueAt(row, 2));
            String place=(String) table1.getValueAt(row, 3);
            String discount= (String) table1.getValueAt(row, 5);
            
            if(id !=null){
                Reservation f= new Reservation(id, name, roomtype,price, place, discount);
                f.setVisible(true);
            }else{
                Reservation f= new Reservation(name, roomtype,price, place, discount);
                f.setVisible(true);
            }
           
        }else if(e.getSource()==tfSearch){
            try {
                showAll();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }else if(e.getSource()==btSearch){
            try {
                showAll();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }
    
    private void showBySearch(String motel) {
        try {
            RoomDAO dao = new RoomDAO();
            
            ArrayList<RoomDTO> list =dao.showBySearch(motel);
            
            if(list==null || list.isEmpty()){
                JOptionPane.showMessageDialog(this, "방이 없습니다.");
                return;
            }
            
            String[][] data = new String[list.size()][colNames.length];
            for(int i=0;i<list.size();i++){
                RoomDTO dto = list.get(i);
                
                data[i][0] = dto.getName();
                data[i][1] = dto.getRoomtype();
                data[i][2] = dto.getPrice()+"";
                data[i][3] = dto.getPlace();
                data[i][4] = dto.getDescription();
                data[i][5] = dto.getDiscount()+"";
                model= new DefaultTableModel(data, colNames);
                
            }//for
            table1.setModel(model);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
    
    
    
    
    
}
